/**
* Represents a view.
* @class <%= initName %>View
*
* @author
*/

define([,
	'app',
	'utils/helpers'<% if(tpl && ext === 'html'){ %>,
	'text!<%= path %><%= initName %>.html'<% } %><% if(tpl && ext === 'hbs'){ %>,
	'templates/templates.js'<% } %>
],
	function(App, Helpers<% if(tpl === true){ %>, Template<% } %>){
		var $ = App.$;

		var <%= initName %>View = App.ComponentView.extend({
			// The DOM element associated with this view
			el: '.yourElement',
			<% if(tpl){ %><% if(ext === 'html'){ %>
			template: _.template(Template, {}), // Setting the view's template property using the underscore template method<% } %><% if(ext === 'hbs'){ %>
			template: Template['myTplName'], // Setting the view's template property using the handlebars template method<% } %><% } %>

			// Options
			options: {
			},

			// View event handlers
			events: {
			},

			// View initialize
			initialize: function(obj) {
				this.options = Helpers.defaults(obj.options || {}, this.options);
			},

			// Renders the view's template to the UI
			render: function() {
				<% if(tpl){ %>
				// Dynamically updates the UI with the view's template
				this.$el.html(this.template());
				<% } %>
				// Maintains chainability
				return this;
			}
		});
		// Returns the view class
		return <%= initName %>View;
	}
);
