/*
 * Generated on <%= (new Date).toISOString().split('T')[0] %>
 * <%= pkg.name %> v<%= pkg.version %>
 * <%= pkg.homepage %>
 *
 * Copyright (c) <%= (new Date).getFullYear() %> <%= pkg.author.name %>
 * Licensed under the MIT license.
 */

'use strict';

/*
 * PERFORMANCE
 * 
 * 1. For performance reasons you should only matching one level down, if possible. 
 * 2. Try to keep your watch task clean. Do NOT watch everything (like icons).
 * 3. Add "spawn: false" to your watch task when you need to speed up your build.
 *
 */

var config = require('./helpers/config');

module.exports = function(grunt) {
	
	// load only used tasks and add fallbacks for those which cannot be find
	require('jit-grunt')(grunt, {<% if (gruntModules && gruntModules.length && (gruntModules.indexOf('grunt-grunticon') != -1 || gruntModules.indexOf('grunt-dr-svg-sprites') != -1)) { %>
		'replace': 'grunt-text-replace'<% } %>
	});
	// measures the time each task takes
	require('time-grunt')(grunt);

	// Load grunt configurations automatically
	var configs = require('load-grunt-configs')(grunt, config.options);

	// Define the configuration for all the tasks
	grunt.initConfig(configs);

	/*
	 *	SIMPLE TASKS
	 */

	// SASS Task
	grunt.registerTask('watchCSS', [
		'sassGlobber:dev',
		'sass:dev'
	]);<% if (gruntModules && gruntModules.length && gruntModules.indexOf('grunt-grunticon') != -1) { %>
	
	// Icons Task
	grunt.registerTask('icons', [<% if (gruntModules && gruntModules.indexOf('grunt-svgmin') != -1) { %>
		'svgmin',<% } %>
		'grunticon',
		'clean:grunticon',
		'replace'
	]); <% } %><% if (gruntModules && gruntModules.length && gruntModules.indexOf('grunt-dr-svg-sprites') != -1) { %>
	
	// Sprites Task
	grunt.registerTask('icons', [
		'dr-svg-sprites',
		'replace:spriteUrl'
	]); <% } %><% if ((gruntModules && gruntModules.length && (gruntModules.indexOf('grunt-packager') != -1 || gruntModules.indexOf('grunt-contrib-requirejs') != -1 || gruntModules.indexOf('grunt-browserify') != -1))) { %>
	
	// JS Task
	grunt.registerTask('jsDev', [<% if(gruntModules.indexOf('grunt-packager') != -1) { %>
		'packager'<% } %><% if(gruntModules.indexOf('grunt-contrib-requirejs') != -1) { %>
		'requirejs:dev'<% } %><% if(gruntModules.indexOf('grunt-browserify') != -1) { %>
		'browserify:vendor',
		'browserify:dev'<% } %>
	]); <% } %><% if (gruntModules && gruntModules.length) { %>
	<% if (gruntModules.indexOf('grunt-responsive-images') != -1 || gruntModules.indexOf('grunt-image-size-export') != -1) {%>
	// Picture Task (This task creates an additional JSON file with the path to your picture)
	grunt.registerTask('pictures', [<% if (gruntModules.indexOf('grunt-responsive-images') != -1) { %>
		'responsive_images'<% if (gruntModules.indexOf('grunt-image-size-export') != -1) { %>,<% }} %><% if (gruntModules.indexOf('grunt-image-size-export') != -1) { %>
		'imageSizeExport'<% } %>
	]); <% }} %><% if (gruntModules && gruntModules.length && gruntModules.indexOf('grunt-photobox') != -1) { %>
	
	// Screenshot Tasks (Take screenshots from your environments)
	grunt.registerTask('photoLocal', [
		'photobox:local' // be sure grunt server is running
	]);
	grunt.registerTask('photoDev', [
		'photobox:dev'
	]);
	grunt.registerTask('photoProd', [
		'photobox:prod'
	]);	<% } %><% if(gruntModules.indexOf('grunt-packager') != -1) { %>
	
	// Sync JS Task
	grunt.registerTask('syncJS', [
		'sync:js'
	]);<% } %><% if(templateEngine.indexOf('assemble') != -1){ %>
	
	// Build HTML Task
	grunt.registerTask('build-html', [
		'assemble'
	]);<% } %>
	<% if (taskRunner.indexOf('gulp') == -1) { %>
	// HTML Hint Task (Check your HTML)
	grunt.registerTask('check-html', [
		'htmlhint'
	]);
	// JS Hint Task (Check you JS)
	grunt.registerTask('check-js', [
		'jshint'
	]);
	// Beautifier Task (Beautify your JS files)
	grunt.registerTask('beauty-files', [
		'jsbeautifier'
	]);<% } %><% if (gruntModules && gruntModules.length) { if (gruntModules.indexOf('grunt-csscomb') != -1) { %>
	
	// CSSComb Task (Beautify your SASS files)
	grunt.registerTask('beauty-scss', [
		'csscomb'
	]);<% }} %>

	/*
	 *	ADVANCED TASKS	<% if (taskRunner.indexOf('gulp') != -1) { %>
	 *  You have chosen Gulp and Grunt as task runners.
	 *  Please define all your advanced tasks in Gulp or set your own grunt tasks here. <% } %>
	 */<% if (taskRunner.indexOf('gulp') == -1) { %>
	grunt.registerTask('server', [<% if (gruntModules && gruntModules.length && (gruntModules.indexOf('grunt-packager') != -1 || gruntModules.indexOf('grunt-contrib-requirejs') != -1 || gruntModules.indexOf('grunt-browserify') != -1)) {  %>
		'jsDev',<% } %><% if(testAndQALibs && testAndQALibs.indexOf('jscs') != -1){ %>
		'jscs',<% } %><% if(templateEngine.indexOf('assemble') != -1){ %>
		'newer:assemble',<% } %>
		'concurrent:syncing',
		'watchCSS'<% if (features && features.length && features.indexOf('installDocs') != -1) { %>,
		'sass:docs'<% } %><% if(gruntModules && gruntModules.length){ if(gruntModules.indexOf('grunt-browser-sync') == -1) { %>,
		'connect:livereload',<% }} if(gruntModules && gruntModules.length){ %><% if(typeof gruntModules === 'object'){ _.each(gruntModules, function(name, i) { if(name == 'grunt-browser-sync') { %>,
		// 'connect:livereload',
		'browserSync', <% } %><%}); %><%} %><%} %>
		'watch'
	]);<% if(gruntModules && gruntModules.length && gruntModules.indexOf('grunt-connect-proxy') !== -1 && proxyHost && proxyPort) { %>
	
	grunt.registerTask('devProxy', [
		'configureProxies:proxy', 
		'connect:proxy',
		'watch:proxies'
	]);<% } %>
	
	grunt.registerTask('build', [
		'clean:dev',
		'jsbeautifier',<% if (gruntModules && gruntModules.length) { if (gruntModules.indexOf('grunt-modernizr') != -1) { %>
		'modernizr',<% }} %><% if (gruntModules && gruntModules.length && gruntModules.indexOf('grunt-contrib-requirejs') != -1) { %>
		'requirejs:prod',<% } %><% if (gruntModules && gruntModules.length) { if (gruntModules.indexOf('grunt-packager') != -1) { %>
		'packager',<% }} %><% if (gruntModules && gruntModules.length) { if (gruntModules.indexOf('grunt-browserify') != -1) { %>
		'browserify:vendor',
		'browserify:dist',<% }} %><% if (gruntModules && gruntModules.length) { if (gruntModules.indexOf('grunt-contrib-uglify') != -1) { %>
		'uglify',<% }} %>
		'concurrent:syncing', <% if (gruntModules && gruntModules.length) { if (gruntModules.indexOf('grunt-csscomb') != -1) { %>
		'beauty-scss',<% }} %>
		'sassGlobber:dist',
		'sass:dist',
		'sass:universal',<% if (features && features.length && features.indexOf('installDocs') != -1) { %>
		'sass:docs',<% } %><% if (gruntModules && gruntModules.length) { if (gruntModules.indexOf('grunt-combine-mq') != -1) { %>
		'combine_mq',<% }} %><% if (gruntModules && gruntModules.length) { if (gruntModules.indexOf('grunt-postcss-separator') != -1) { %>
		'postcssSeparator',<% }} %><% if (gruntModules && gruntModules.length) { if (gruntModules.indexOf('grunt-autoprefixer') != -1) { %>
		'autoprefixer',<% }} %>
		'cssmin',<% if (gruntModules && gruntModules.length) { if (gruntModules.indexOf('grunt-bless') != -1) { %>
		'bless',<% }} %><% if(templateEngine.indexOf('assemble') != -1){ %>
        'assemble',<% } %>
		'concurrent:build'
	]);

	grunt.registerTask('default', [
		'server'
	]);
	
	// alias serve by grunt convention
	grunt.registerTask('serve', [
		'server'
	]);<% if (features && features.length && features.indexOf('createDevFolder') != -1) { %>
	
	grunt.registerTask('dist', [
		'clean',<% if (gruntModules && gruntModules.length) { if (gruntModules.indexOf('grunt-version') != -1) { %>
		'version:prerelease',<% }} %>
		'build',
		'copy:dist'
	]); <% } %>
<% } %>
};